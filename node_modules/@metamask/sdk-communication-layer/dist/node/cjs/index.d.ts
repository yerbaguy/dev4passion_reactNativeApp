import { EventEmitter2 } from 'eventemitter2';
import Socket from './Socket';
import WebRTC from './WebRTC';
export declare type DappMetadata = {
    url: string;
    name: string;
};
declare type RemoteCommunicationOptions = {
    platform: string;
    commLayer: string;
    otherPublicKey?: string;
    webRTCLib?: any;
    reconnect?: any;
    dappMetadata?: DappMetadata;
    transports?: string[];
    enableDebug?: boolean;
};
export declare enum CommunicationLayerPreference {
    WEBRTC = "webrtc",
    SOCKET = "socket",
    WALLETCONNECT = "wc"
}
export default class RemoteCommunication extends EventEmitter2 {
    commLayer: any;
    channelId: any;
    connected: boolean;
    isOriginator: boolean;
    originatorInfo: any;
    walletInfo: any;
    paused: boolean;
    CommLayer: typeof WebRTC | typeof Socket;
    otherPublicKey: string;
    webRTCLib: any;
    dappMetadata: DappMetadata;
    transports: string[];
    platform: string;
    enableDebug: boolean;
    constructor({ platform, commLayer, otherPublicKey, webRTCLib, reconnect, dappMetadata, transports, enableDebug, }: RemoteCommunicationOptions);
    setupCommLayer({ CommLayer, otherPublicKey, webRTCLib, commLayer, reconnect, }: {
        CommLayer: any;
        otherPublicKey: any;
        webRTCLib: any;
        commLayer: any;
        reconnect: any;
    }): void;
    clean(): void;
    connectToChannel(id: any): void;
    sendMessage(message: any): void;
    onMessageCommLayer(message: any): void;
    generateChannelId(): {
        channelId: any;
        pubKey: any;
    };
    pause(): void;
    resume(): void;
    disconnect(): void;
}
export {};
